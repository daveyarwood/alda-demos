## inline clojure code

### this...
piano: o4 c1/g/>d/e

### ...is equivalent to this:
(part "piano"
  (octave 4)
  (chord
    (note (pitch :c))
    (note (pitch :g))
    (octave :up)
    (note (pitch :d))
    (note (pitch :e))))













### the `note` function:
(note (pitch :c))
(note (pitch :c) (duration (note-length 4)))

### oh look, bongos
midi-percussion: o4 c8 c+ d d+ e

### a function that generates random bongo patterns
(defn random-bongos
  [ticks vol-min vol-max]
  [(octave 4)
   (set-note-length 16) ; 16th notes
   (let [notes     (-> #{[:c] [:c :sharp] [:d] [:d :sharp] [:e]}
                       (->> (map #(note (apply pitch %))))
                       (conj (pause)))
         rand-note #(rand-nth notes)
         rand-vol  #(vol (+ vol-min (rand-int (- vol-max vol-min))))
         tick      #(vector (rand-vol) (rand-note))]
     (take ticks (repeatedly tick)))])

midi-percussion:
  # bongos
  V1: (random-bongos (* 8 4 4) 25 75)
  # hi-hat to keep time
  V2: o2 (vol 50) [ g+4 g+ g+ g+ ] *8 %end
  @end o5 (vol 80) a1 # ding

